public class Calculaator {
	public static void main(String[] args) {
		//完成表达式的运算3+2*6-2
		String expression = "3+2*6-2";
		//创建两个栈，数栈，符号栈
		ArrayStack2 numStack = new ArrayStack2(10);
		ArrayStack2 operStack = new ArrayStack2(10);
		//定义需要的相关变量
		int index = 0;//用于扫描
		int num1 = 0;
		int num2 = 0;
		int oper = 0;
		int res = 0;
		char ch = ' ';//将每一次扫描得到的char保存到ch
		//开始while循环的扫描expression
		while(true) {
			//一次得到expression的每一个字符
			ch = expression.substring(index,index+1).charAt(0);
			//判断ch是什么，并做相应的处理
			if(operStack.isOper(ch)) {//如果是运算符
				//判断当前的符号栈是否为空
				if(!operStack.isEmpty()) {
					//如果符号栈有操作符，就进行比较，如果当前的操作符的优先级小于或者等于栈中的操作符
					//就需要从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈
					if(operStack.priorty(ch) <= operStack.priorty(operStack.peek())) {
						num1 = numStack.pop();
						num2 = numStack.pop();
						oper = operStack.pop();
						res = numStack.cal(num1, num2, oper);
						//把运算的结果入数栈
						numStack.push(res);
						//然后将当前的操作符入符号栈
						operStack.push(ch);
					}else {
						//如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈。
						operStack.push(ch);
					}
				}else {//如果为空直接入栈
					operStack.push(ch);
				}
			}else {//如果是数则直接入数栈
				numStack.push(ch - 48);//将字符转成数字
			}
			//让index + 1，并判断是否扫描到expression最后
			index++;
			if(index >= expression.length()) {
				break;
			}
		}
		
		//当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号，并运行
		while(true) {
			//如果符号栈为空，则计算到最后结果，则数栈中只有一个数字
			if(operStack.isEmpty()) {
				break;
			}
			num1 = numStack.pop();
			num2 = numStack.pop();
			oper = operStack.pop();
			res = numStack.cal(num1, num2, oper);
			numStack.push(res);//入栈
		}
		//将数栈的最后数，pop出，就是结果
		int res2 = numStack.pop();
		System.out.printf("表达式%s = %d",expression,res2);
	}
}

//定义一个ArrayStack2类 表示栈
class ArrayStack2{
	private int maxSize;//栈的大小
	private int[] stack;//数组模拟栈，数据放在这里
	private int top = -1;//top表示栈顶，初始为-1表示没有数据
	
	//构造器
	public ArrayStack2(int maxSize) {
		this.maxSize = maxSize;
		stack = new int[this.maxSize];
	}
	
	//判断栈是否满了
	public boolean isFull() {
		return top == maxSize-1;
	}
	//判断栈是否为空
	public boolean isEmpty() {
		return top == -1;
	}
	//入栈-push
	public void push(int value) {
		if(isFull()) {
			System.out.println("栈满无法加入");
			return;
		}
		top++;
		stack[top] = value;
	}
	//出栈-pop,将栈顶的数据返回
	public int pop() {
		//判断栈是否为空
		if(isEmpty()) {
			//抛出异常
			throw new RuntimeException("栈空，没有数据");
		}
		int value = stack[top];
		top--;
		return value;
	}

	//返回运算符的优先级，优先级是程序员定，我们用数字表示优先级
	//数字越大，则优先级越高
	public int priorty(int oper) {
		if(oper == '*' || oper == '/') {
			return 1;
		}else if(oper == '+' || oper == '-'){
			return 0;
		}else {
			return -1;//假定当前的表达式只有+,―,*,/
		}
	}
	
	//判断是不是一个运算符
	public boolean isOper(char val) {
		return val == '+' || val == '-' || val == '*' || val == '/';
	}
	
	//运算
	public int cal(int num1,int num2,int oper) {
		int res = 0;//res 用于存放计算的结果
		switch(oper){
		case '+':
			res = num2 + num1;
			break;
		case '-':
			res = num2 - num1;
			break;
		case '*':
			res = num2 * num1;
		case '/':
			res = num2 / num1;
		default:
			break;
		}
		return res;
	}
	
	//增加一个方法，可以返回当前栈顶的值，但是不是真正的pop
	public int peek() {
		return stack[top];
	}
}
